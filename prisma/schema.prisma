datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model User {
  id            Int       @id @default(autoincrement())
  lastname      String?
  firstname     String
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  permissions        UserPermission[]
  roles              UserRole[]
  createdPermissions Permission[]     @relation("CreatedPermissions")
  updatedPermissions Permission[]     @relation("UpdatedPermissions")
  createdRoles       Role[]           @relation("CreatedRoles")
  updatedRoles       Role[]           @relation("UpdatedRoles")

  @@map("users")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique @default(uuid())
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int
  updatedBy   Int?

  roles   RolePermission[]
  users   UserPermission[]
  creator User             @relation("CreatedPermissions", fields: [createdBy], references: [id])
  updater User?            @relation("UpdatedPermissions", fields: [updatedBy], references: [id])

  @@map("permissions")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique @default(uuid())
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int
  updatedBy   Int?

  permissions RolePermission[]
  users       UserRole[]
  creator     User             @relation("CreatedRoles", fields: [createdBy], references: [id])
  updater     User?            @relation("UpdatedRoles", fields: [updatedBy], references: [id])

  @@map("roles")
}

model RolePermission {
  roleId       Int
  permissionId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("rolePermissions")
}

model UserPermission {
  userId       Int
  permissionId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("userPermissions")
}

model UserRole {
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("userRoles")
}
