datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                  Int     @id @default(autoincrement())
  user_id             Int
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id            Int      @id @default(autoincrement())
  session_token String   @unique
  user_id       Int
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             Int       @id @default(autoincrement())
  lastname       String?
  firstname      String
  username       String    @unique
  email          String    @unique
  email_verified DateTime?
  password       String
  image          String?
  accounts       Account[]
  sessions       Session[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  UserPermission UserPermission[]
  UserRole       UserRole[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique @default(uuid())
  description String
  active      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  RolePermission RolePermission[]
  UserPermission UserPermission[]

  @@map("permissions")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique @default(uuid())
  description String
  active      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  RolePermission RolePermission[]
  UserRole       UserRole[]

  @@map("roles")
}

model RolePermission {
  role_id       Int
  permission_id Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@map("role_permissions")
}

model UserPermission {
  user_id       Int
  permission_id Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([user_id, permission_id])
  @@map("user_permissions")
}

model UserRole {
  user_id    Int
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
  @@map("user_roles")
}
